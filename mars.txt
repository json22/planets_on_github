6/9/16 Bash Terminalpwd= where am I, “present working directory”whoamicd= change directorycd Desktop= gets you to desktopcd ..=go up onels=shows you what’s insidels –F= shows you whats file (/) with what’s insidemkdir insertname= make directorynano insertname.txt=make text filemv insertnameoffiletobemoved totheplaceiwanttomovetorm=removenano insertdirectory/insertfile.txt..= up onermdir= remove directorycat insertfile= open filewc *.pdb = look for all files wc -l *.pdbwc -l *.pdb > lengths.txt= makes this answer into filesort -n lengths.txt= sort by numbers in this filesort –nr lengths.txt= reverse| = show answer without saving into new filels *[AB].txt= look for txt files with A or B in the name*.dat= select all files with .datfor= starts loop, it will loop command until it sees “done/end”ls –l= long listcut –f columnnumber=### The Unix ShellA software carpentry reference for the commands used in today's class can be found here:    http://swcarpentry.github.io//shell-novice/reference.htmlThe software carpentry lesson tutorial for the Unix Shell can be found here:    http://swcarpentry.github.io/shell-novice/.                    refers to the current directory..                   refers to the directory immediately above, i.e. the "parent" directory cd                 change directoryls -F             directories in the listing will have a trailing slash; others are filescd ..              this command will move up to the parent directorypwd              print the working directory... in other words, the current directory/subdirectory path you are currently inThe bash shell has tab completion.  As you type a path or a command and then press tab, the Bash shell will try to autocomplete the file or directory name.mkdir           creates a new directorymv                is used to rename a file or directory, despite the command appearing to be a shortcut for "move"; there is no "rename" command in Bashrm                delete a filermdir           delete an empty directory; if the directory is not empty, you need to change into the directory, delete all the files with the 'rm' command, go back to the parent directory with the 'cd ..', and then rerun the 'rmdir' commandcat               short for concatenate; this command is not named intuitively, but it is used a lot to output the contents of a file to the screen, also known as "Standard Out" or "stdout" in Linux.                    Be sure to run the command with a filename, such as "cat lengths.txt", otherrwise, it does weird  things... just press Ctrl+C to get back to the prompt.wc               counts the number of characters, words and or lines in one or more files.  The "-l" flag is commonly used to count the number of lines in a given file or set of files.  For example, "wc -l *.pdb"head           output the first few lines (10 by default) to the screen.  Very useful when the file has 1000s of lines and you only want to see the top portionsort              sort the contents of a file|                   The "pipe" character is used to take the output of one command and use it as input to second command.  For example: "sort -n lengths.txt | head -n 1"                     The above command will numerically sort the file lengths.txt and send the output to the "head" command, which in turn will output only the first line.                                          You can "pipe" multiple commands, for example:                         wc -l *.pdb | sort -n | head -n 1                                             You do not need a space between the "|" character.  But it improves readability in your code.                    []                 The brackets can be used in Bash to create a search string.  For example, "ls *[AB].txt"  will search for all files that end in either A.txt or B.txt, regardless of any preceding characters   cp               copy a file, group of files or directories.  For example, "cp file1 file2", which makes a copy of file1 and name it file2.echo           a Bash command to output a string to screenFor loopsThe for loop allows you to iterate over many files or directories and run a set of commands against each file or directory.for filename in basilisk.dat unicorn.datdo    echo $filenamedoneThe for loop construct starts with "for variable in file1 file2".  Then, in Bash, you must start a for loop with "do".  Next, each file in this example is accessed by the "filename" variable.  This for loop will output the GSs-MacBook-Air:16_06_01 CMC FYR AGS$ for file in *FYR*.txt; do  echo $file; doneGSs-MacBook-Air:16_06_01 CMC FYR AGS$ for file in *FYR*.txt; do  echo $file; tail -200 "$file" | head -n 100 | cut -f 2 > absorbance-"$file" ; doneGSs-MacBook-Air:16_06_01 CMC FYR AGS$ for file in *FYR*.txt; do  echo $file; tail -200 "$file" | head -n 100 | cut -f 2 > absorbance-"$file" ; donePYTHON>>> import numpy>>> import matplotlib.pyplot>>> data=numpy.loadtxt(fname='inflammation-01.csv',delimiter=',')>>> ave_inflammation=data.mean(axis=0)>>> ave_plot=matplotlib.pyplot.plot(ave_inflammation)>>> ave_plot=matplotlib.pyplot.plot(data.mean(axis=0))>>> matplotlib.pyplot.show()>>> ave_plot=matplotlib.pyplot.plot(data.max(axis=0))>>> matplotlib.pyplot.show()>>> ave_plot=matplotlib.pyplot.plot(data.min(axis=0))>>> matplotlib.pyplot.show()